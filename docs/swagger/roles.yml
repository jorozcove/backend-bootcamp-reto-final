#   Route.group(() =>{
#     Route.post('/create', 'RolesController.createRole');
#     Route.get('/getRoles', 'RolesController.getRoles')
#     Route.delete('/deleteRol/:id_role', 'RolesController.deleeRole')
#     Route.put('/updateRol/:id_role', 'RolesController.updateRole')
#   }).prefix('rol').middleware(['auth', 'admin'])

# public async createRole({request, response}: HttpContextContract){
#         try{
#             const {name} = request.all();
#             console.log(name)
#             const role = new Role();
#             role.name = name;
#             role.state = true;
#             await role.save();

#             return response.status(200).json({
#                 "state": true,
#                 "message": "role creado exitosamente"
#             })

#         }catch(e){
#             console.log(e)
#             return response.status(500).json({
#                 "state": false,
#                 "message": "Error al crear el rol"
#             })
#         }
#     }

########### Route.post('/createRole', 'RolesController.createRole');

/api/v1/rol/createRole:
  post:
    tags:
      - Roles
    security:
      - bearerAuth: []
    description: Crear rol
    produces:
      - application/json
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Nombre del rol
          example:
            {
              "name": "string"
            }
    responses:
      200:
        description: Petición exitosa
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/Role'
            example:
              {
                "state": true,
                "message": "role creado exitosamente"
              }
      401:
        description: No autorizado
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/User'
            example:
              {
                "state": false,
                "message": "Falta el token de autorización"
              }
      500:
        description: Error en el servidor
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/Role'
            example:
              {
                "state": false,
                "message": "Error al crear el rol"
              }

# public async getRoles({response}: HttpContextContract){
#         try{
#             const roles = await Role.query().select('id','name').where({})
#             return response.status(200).json({
#                 state: true,
#                 roles,
#                 message: "Listado de roles"
#             }) 
#         } catch (error) {
#             console.log(error)
#             return response.status(500).json({
#                 state: false,
#                 message: "Error al listar roles"
#             })
#         }
#     }

########### Route.get('/getRoles', 'RolesController.getRoles')

/api/v1/rol/getRoles:
  get:
    tags:
      - Roles
    security:
      - bearerAuth: []
    description: Listar roles
    produces:
      - application/json
    responses:
      200:
        description: Petición exitosa
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/Role'
            example:
              {
                "state": true,
                "roles": [
                  {
                    "id": 1,
                    "name": "admin"
                  },
                  {
                    "id": 2,
                    "name": "user"
                  }
                ],
                "message": "Listado de roles"
              }
      401:
        description: No autorizado
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/User'
            example:
              {
                "state": false,
                "message": "Falta el token de autorización"
              }
      500:
        description: Error en el servidor
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/Role'
            example:
              {
                "state": false,
                "message": "Error al listar roles"
              }

# public async updateRole({request, response}: HttpContextContract){
#         try {
#             const id = request.param('id_role')
#             const data = request.all()
#             await Role.query().where('id', id).update(data)
#             return response.status(200).json({
#                 state: true,
#                 message: "Rol editado con exito"
#             })
#         } catch (error) {
#             return response.status(500).json({
#                 state: false,
#                 message: "Error al actualizar Rol"
#             })
#         }
#     }

########### Route.put('/updateRol/:id_role', 'RolesController.updateRole')

/api/v1/rol/updateRol/{id_role}:
  put:
    tags:
      - Roles
    security:
      - bearerAuth: []
    description: Editar rol
    produces:
      - application/json
    parameters:
      - in: path
        name: id_role
        schema:
          type: integer
        required: true
        description: ID del rol
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Nombre del rol
          example:
            {
              "name": "string"
            }
    responses:
      200:
        description: Petición exitosa
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/Role'
            example:
              {
                "state": true,
                "message": "Rol editado con exito"
              }
      401:
        description: No autorizado
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/User'
            example:
              {
                "state": false,
                "message": "Falta el token de autorización"
              }
      500:
        description: Error en el servidor
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/Role'
            example:
              {
                "state": false,
                "message": "Error al actualizar Rol"
              }

# public async deleteRole({request, response}: HttpContextContract){
#         try {
#             const id = request.param('id_role')
#             await Role.query().where('id', id).delete()
#             return response.status(200).json({
#                 state: true,
#                 message: "Rol eliminado con exito"
#             })
#         } catch (error) {
#             return response.status(500).json({
#                 state: false,
#                 message: "Error al eliminar Rol"
#             })
#         }
#     }

########### Route.delete('/deleteRol/:id_role', 'RolesController.deleteRole')

/api/v1/rol/deleteRol/{id_role}:
  delete:
    tags:
      - Roles
    security:
      - bearerAuth: []
    description: Eliminar rol
    produces:
      - application/json
    parameters:
      - in: path
        name: id_role
        schema:
          type: integer
        required: true
        description: ID del rol
    responses:
      200:
        description: Petición exitosa
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/Role'
            example:
              {
                "state": true,
                "message": "Rol eliminado con exito"
              }
      401:
        description: No autorizado
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/User'
            example:
              {
                "state": false,
                "message": "Falta el token de autorización"
              }
      500:
        description: Error en el servidor
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/definitions/Role'
            example:
              {
                "state": false,
                "message": "Error al eliminar Rol"
              }
